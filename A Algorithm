import heapq

def a_star(graph, start, goal, heuristic):
    queue = [(0 + heuristic[start], start, [])]
    visited = set()
    while queue:
        cost, node, path = heapq.heappop(queue)
        if node == goal:
            return path + [node]
        if node not in visited:
            visited.add(node)
            for neighbor, weight in graph[node].items():
                heapq.heappush(queue, (cost - heuristic[node] + weight + heuristic[neighbor], neighbor, path + [node]))
    return None

graph = {'A': {'B': 1, 'C': 3}, 'B': {'D': 5}, 'C': {'D': 2}, 'D': {}}
heuristic = {'A': 5, 'B': 3, 'C': 2, 'D': 0}
print(a_star(graph, 'A', 'D', heuristic))
